struct Matrix {
    buf : Buffer,
    rows : i32,
    cols : i32
}

struct Sparse {
    content : Buffer,
    indizes : Buffer,
    rows : i32,
    cols : i32
}

struct AccM {
    read  : fn(i32, i32) -> f32,
    write : fn(i32, i32, f32) -> ()
}

struct AccS {
    readC  : fn(i32, i32) -> f32,
    readI  : fn(i32, i32) -> i32,
    write : fn(i32, i32, f32, i32) -> ()
}

fn @make_matrix(buffer: Buffer, rows: i32, cols: i32) -> Matrix {
    Matrix { buf = buffer, rows = rows, cols = cols }
}

fn @make_matrix_empty(rows: i32, cols: i32) -> Matrix {
    let size = 4 * cols as i64 * rows as i64;
    let buffer = alloc(0, size);
    Matrix { buf = buffer, rows = rows, cols = cols }
}

fn @reshape_matrix(m: Matrix, rows: i32, cols: i32) -> Matrix {
    if m.rows * m.cols == rows * cols {
        make_matrix(m.buf, rows, cols)
    } else {
        m
    }
}

fn @make_sparse(content: Buffer, indizes: Buffer, rows: i32, cols: i32) -> Sparse {
    Sparse { content = content, indizes = indizes, rows = rows, cols = cols}
}

fn @make_sparse_empty(rows: i32, cols: i32) -> Sparse {
    let size = 4 * rows as i64 * cols as i64;
    let buff_c = alloc(0, size);
    let buff_i = alloc(0, size);
    Sparse { content = buff_c, indizes = buff_i, rows = rows, cols = cols}
}

fn @get_sparse_acc(m: Sparse) -> AccS {
    AccS {
        readC = @|r, c|       { bitcast[&   [f32]](m.content.data)(r * m.cols + c) },
        readI = @|r, c|       { bitcast[&   [i32]](m.indizes.data)(r * m.cols + c) },
        write = @|r, c, v, i| { bitcast[&mut[f32]](m.content.data)(r * m.cols + c) = v;
                                bitcast[&mut[i32]](m.indizes.data)(r * m.cols + c) = i; }
    }
}

fn @get_mat_acc(m: Matrix) -> AccM {
    AccM {
        read  = @|r, c|    { bitcast[&   [f32]](m.buf.data)(r * m.cols + c) },
        write = @|r, c, v| { bitcast[&mut[f32]](m.buf.data)(r * m.cols + c) = v; }
    }
}

fn @matmul(a: Matrix, b: Matrix) -> Matrix {
    let m = make_matrix_empty(a.rows, b.cols);
    let a_acc = get_mat_acc(a);
    let b_acc = get_mat_acc(b);

    for m_acc, _v, r, c in iterate_matrix_par(m) {
        m_acc.write(r, c, 0);
        for i in range(0, a.cols) {
            m_acc.write(r, c, m_acc.read(r, c) + a_acc.read(r, i) * b_acc.read(i, c));
        }
    }
    m
}

fn @sparse_mult(a: Sparse, b: Matrix) -> Matrix {
    let m = make_matrix_empty(a.rows, b.cols);
    let b_acc = get_mat_acc(b);

    for m_acc, _v, r, c in iterate_matrix(m) {
        m_acc.write(r, c, 0);
        for _acc, v, i, _c in iterate_sparse_row(a, r) {
            m_acc.write(r, c, m_acc.read(r, c) + v * b_acc.read(i, c));
        }
    }
    m
}

fn @add_elem_wise(mat1: Matrix, mat2: Matrix) -> Matrix {
    let res = make_matrix_empty(mat1.rows, mat1.cols);

    let res_acc  = get_mat_acc(res);
    let mat2_acc = get_mat_acc(mat2);
    for _acc, v, r, c in iterate_matrix_par(mat1) {
        res_acc.write(r, c, mat2_acc.read(r,c) + v);
    }
    res
}
