fn @iterate_matrix(body: fn(AccM, f32, i32, i32) -> ()) {
	fn @loop(mat: Matrix) -> () {
		let acc = get_mat_acc(mat);
        for r in range(0, mat.rows) {
            for c in range(0, mat.cols) {
                @body(acc, acc.read(r, c), r, c);
            }
        }
	}

	loop
}

fn @iterate_matrix_par(body: fn(AccM, f32, i32, i32) -> ()) {
	fn @loop(mat: Matrix) -> () {
		let acc = get_mat_acc(mat);
        for r in parallel(0, 0, mat.rows) {
            for c in range(0, mat.cols) {
                @body(acc, acc.read(r, c), r, c);
            }
        }
	}

	loop
}

fn @iterate_matrix_row(body: fn(AccM, f32, i32) -> ()) {
	fn @loop(mat: Matrix, r: i32) -> () {
		let acc = get_mat_acc(mat);
        for c in range(0, mat.cols) {
            @body(acc, acc.read(r, c), c);
        }
	}

	loop
}

fn @iterate_matrix_row_par(body: fn(AccM, f32, i32) -> ()) {
	fn @loop(mat: Matrix, r: i32) -> () {
		let acc = get_mat_acc(mat);
        for c in parallel(0, 0, mat.cols) {
            @body(acc, acc.read(r, c), c);
        }
	}

	loop
}

fn @iterate_matrix_col(body: fn(f32, i32) -> ()) {
	fn @loop(mat: Matrix, c: i32) -> () {
		let acc = get_mat_acc(mat);
		for r in range(0, mat.rows) {
            @body(acc.read(r, c), r);
        }
	}

	loop
}

fn @iterate_matrix_col_par(body: fn(f32, i32) -> ()) {
	fn @loop(mat: Matrix, c: i32) -> () {
		let acc = get_mat_acc(mat);
		for r in parallel(0, 0, mat.rows) {
            @body(acc.read(r, c), r);
        }
	}

	loop
}

fn @iterate_sparse(body: fn(AccS, f32, i32, i32, i32) -> ())  {
	fn @loop(mat: Sparse) -> () {
		let acc = get_sparse_acc(mat);
        for r in range(0, mat.rows) {
            for c in range(0, mat.cols) {
                @body(acc, acc.readC(r, c), acc.readI(r, c), r, c);
            }
        }
	}

	loop
}

fn @iterate_sparse_par(body: fn(AccS, f32, i32, i32, i32) -> ())  {
	fn @loop(mat: Sparse) -> () {
		let acc = get_sparse_acc(mat);
        for r in parallel(0, 0, mat.rows) {
            for c in range(0, mat.cols) {
                @body(acc, acc.readC(r, c), acc.readI(r, c), r, c);
            }
        }
	}

	loop
}

fn @iterate_sparse_row(body: fn(AccS, f32, i32, i32) -> ()) {
	fn @loop(mat: Sparse, r: i32) -> () {
		let acc = get_sparse_acc(mat);
        for c in range(0, mat.cols) {
            @body(acc, acc.readC(r, c), acc.readI(r, c), c);
        }
	}

	loop
}

fn @iterate_sparse_row_par(body: fn(AccS, f32, i32, i32) -> ()) {
	fn @loop(mat: Sparse, r: i32) -> () {
		let acc = get_sparse_acc(mat);
        for c in parallel(0, 0, mat.cols) {
            @body(acc, acc.readC(r, c), acc.readI(r, c), c);
        }
	}

	loop
}

fn @iterate_sparse_col(body: fn(AccS, f32, i32, i32) -> ()) {
	fn @loop(mat: Sparse, c: i32) -> () {
		let acc = get_sparse_acc(mat);
        for r in range(0, mat.rows) {
            @body(acc, acc.readC(r, c), acc.readI(r, c), r);
        }
	}

	loop
}

fn @iterate_sparse_col_par(body: fn(AccS, f32, i32, i32) -> ()) {
	fn @loop(mat: Sparse, c: i32) -> () {
		let acc = get_sparse_acc(mat);
        for r in parallel(0, 0, mat.rows) {
            @body(acc, acc.readC(r, c), acc.readI(r, c), r);
        }
	}

	loop
}

fn @iterate_image(body: fn(AccI, u8, i32, i32, i32) -> ()) {
	fn @loop(img: Image, channels: i32) -> () {
		let acc = get_image_acc(img, channels);
		for y in range(0, img.height) {
			for x in range(0, img.width) {
				for c in unroll(0, channels) {
					@body(acc, acc.read(x, y, c), x, y, c);
				}
			}
		}
	}

	loop
}

fn @iterate_image_par(body: fn(AccI, u8, i32, i32, i32) -> ()) {
	fn @loop(img: Image, channels: i32) -> () {
		let acc = get_image_acc(img, channels);
		for y in parallel(0, 0, img.height) {
			for x in range(0, img.width) {
				for c in unroll(0, channels) {
					@body(acc, acc.read(x, y, c), x, y, c);
				}
			}
		}
	}

	loop
}
