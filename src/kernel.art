fn make_conv_matrix(kernel: Matrix, im_width: i32, im_height: i32, channels: i32) -> Sparse {
    let m = make_sparse_empty(im_width * im_height, kernel.cols * kernel.rows);
    let m_acc = get_sparse_acc(m);
    let k_acc = get_mat_acc(kernel);

    // Not very efficient, but should be okay since this is only necessary once
    let ksizeh_r = kernel.rows / 2;
    let ksizeh_c = kernel.cols / (2 * channels);

    let stride_y = im_width * channels;

    for j in range(0, im_height) {
        for i in range(0, im_width) {
            let s_row = j * im_width + i;
            for r in range(-ksizeh_r, ksizeh_r+1) {
                let im_row = j + r;
                if im_row < 0 || im_row >= im_height { continue() } // padding with 0s s.t. image size at start and end is the same
                for c in range(-ksizeh_c, ksizeh_c+1) {
                    let mut im_col = (i + c) * channels;
                    if im_col < 0 || im_col >= stride_y { continue() } // padding with 0s s.t. image size at start and end is the same
                    let k_row = r + ksizeh_r;
                    let mut k_col = (c + ksizeh_c) * channels;
                    let mut s_col = k_row * kernel.cols + k_col;
                    for channel in range(0, channels) {
                        m_acc.write(s_row, s_col, k_acc.read(k_row, k_col), im_row * stride_y + im_col);
                        im_col++;
                        k_col++;
                        s_col++;
                    }
                }
            }
        }
    }
    m
}

// Image needs to be channel-interleaved (e.g. RGBRGBRGB), same for kernel weights
fn @convolute(kernel: Matrix, channels: i32, img_mat: Matrix, bias: f32, use_bias: bool) -> Matrix {
    let width = img_mat.cols / channels;
    let height = img_mat.rows;
    let m = reshape_matrix(img_mat, img_mat.rows * img_mat.cols, 1);    // Image as column-vector, interleaved column style
    let acc = get_mat_acc(m);

    let conv = make_conv_matrix(kernel, width, height, channels);
    let prod = sparse_mult(conv, m);
    let reshaped = reshape_matrix(prod, height, width);

    if use_bias {
        let res_acc = get_mat_acc(reshaped);
        for v, r, c in iterate_matrix(reshaped) {
            res_acc.write(r, c, v + bias);
        }
    }

    release(conv.content);
    release(conv.indizes);

    reshaped
}

fn @convolution(conv_mat: Sparse, img_mat: Matrix, bias: f32, use_bias: bool) -> Matrix {
    let m = reshape_matrix(img_mat, img_mat.rows * img_mat.cols, 1);    // Image as column-vector, interleaved column style
    let acc = get_mat_acc(m);

    let prod = sparse_mult(conv_mat, m);

    if use_bias {
        let res_acc = get_mat_acc(prod);
        for v, r, c in iterate_matrix(prod) {
            res_acc.write(r, c, v + bias);
        }
    }

    prod
}

fn @conv2d(in_channels: i32, out_channels: i32, conv_matrices: &[Sparse], biases: &[f32], img_mat: Matrix, use_bias: bool) -> Matrix {
    let width = img_mat.cols / in_channels;
    let height = img_mat.rows;

    let copy_size  = width as i64 * height as i64 * 4;
    let conv_buffer = alloc(0, copy_size * out_channels as i64);

    for i in range(0, out_channels) {
        let conv_mat = convolution(conv_matrices(i), img_mat, biases(i), use_bias);
        let buf_off  = i as i64 * copy_size;
        runtime_copy(0, bitcast[&[i8]](conv_mat.buf.data), 0, 0, conv_buffer.data, buf_off, copy_size);
        release(conv_mat.buf);
    }

    release(img_mat.buf);
    make_matrix(conv_buffer, height, width * out_channels)
}

// Image by channels separated RRRRRR...GGGGGG....BBBBBB
fn max_pool(img_mat: Matrix, ksize: i32, channels:i32) -> Matrix {
    let buffer = alloc(0, (4 * img_mat.cols * img_mat.rows / (ksize * ksize)) as i64);

    let acc     = bitcast[&mut[f32]](buffer.data);
    let img_acc = bitcast[&[f32]](img_mat.buf.data);
    for i in range(0, channels) {
        for y in range(0, img_mat.rows / 2) {
            for x in range(0, img_mat.cols / (channels * 2)) {
                let v11 = img_acc((i * img_mat.cols * img_mat.rows / channels) +  2*y    * img_mat.cols / channels + 2*x);
                let v12 = img_acc((i * img_mat.cols * img_mat.rows / channels) +  2*y    * img_mat.cols / channels + 2*x+1);
                let v21 = img_acc((i * img_mat.cols * img_mat.rows / channels) + (2*y+1) * img_mat.cols / channels + 2*x);
                let v22 = img_acc((i * img_mat.cols * img_mat.rows / channels) + (2*y+1) * img_mat.cols / channels + 2*x+1);

                let val = max(max(v11, v12), max(v21, v22));
                acc((i * img_mat.cols * img_mat.rows / (channels * 4)) + y * (img_mat.cols / (channels * 2)) + x) = val;
            }
        }
    }
    release(img_mat.buf);
    make_matrix(buffer, img_mat.rows / 2, img_mat.cols / 2)
}

fn leaky_relu(img_mat: Matrix) -> Matrix {
    let acc = get_mat_acc(img_mat);
    for v, r, c in iterate_matrix(img_mat) {
        acc.write(r, c, leaky_relu_x(0.01, v));
    }
    img_mat
}

fn @max(x: f32, y: f32) -> f32 {
    select(x > y, x, y)
}

fn @leaky_relu_x(neg_slope: f32, x: f32) -> f32 {
    if x >= 0.0 {
        x
    } else {
        neg_slope * x
    }
}

fn make_interleaved(img_mat: Matrix, channels: i32) -> Matrix {
    let bufC = alloc(0, (4 * img_mat.cols * img_mat.rows) as i64);
    let accC = bitcast[&mut[f32]](bufC.data);
    let accB = bitcast[&[f32]](img_mat.buf.data);

    for y in range(0, img_mat.rows) {
        for x in range(0, img_mat.cols / channels) {
            for i in range(0, channels) {
                accC(y * img_mat.cols + x * channels + i) = accB(y * img_mat.cols / channels + x + i * img_mat.cols * img_mat.rows / channels);
            }
        }
    }

    release(img_mat.buf);
    make_matrix(bufC, img_mat.rows, img_mat.cols)
}

fn nearest(img_mat: Matrix, channels: i32) -> Matrix {
    let buffer = alloc(0, (4 * 4 * img_mat.cols * img_mat.rows) as i64);
    let res_mat = make_matrix(buffer, img_mat.rows * 2, img_mat.cols * 2);
    let accR = get_mat_acc(res_mat);
    let accI = get_mat_acc(img_mat);

    for y in range(0, res_mat.rows) {
        for x in range(0, res_mat.cols / channels) {
            for i in range(0, channels) {
                accR.write(y, (channels * x) + i, accI.read(y / 2, channels * (x / 2) + i));
            }
        }
    }
    res_mat
}
