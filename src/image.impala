struct Image {
    buf : Buffer,
    width  : i32,
    height : i32
}

fn make_image(buf: Buffer, width: i32, height: i32) -> Image {
    Image { buf: buf, width: width, height: height }
}

fn make_matrix_from_image(img: Image, channels: i32) -> Matrix {
    let m = make_matrix_empty(img.height, img.width * channels);

    let acc_m = get_mat_acc(m);
    let acc_img = bitcast[&[u8]](img.buf.data);

    for y in range(0, img.height) {
        for x in range(0, img.width) {
            for c in range(0, channels) {
                acc_m.write(y, channels * x + c, acc_img((y * img.width + x) * channels + c) as f32 * (1.0f / 255.0f));
            }
        }
    }
    m
}

fn make_image_from_matrix(m: Matrix, channels: i32) -> Image {
    let height = m.rows;
    let width = m.cols / channels;
    let buf = alloc(0, (m.rows * m.cols) as i64);

    let acc_m = get_mat_acc(m);
    let acc_img = bitcast[&mut[u8]](buf.data);

    for y in range(0, height) {
        for x in range(0, width) {
            for c in range(0, channels) {
                acc_img((y * width + x) * channels + c) = (acc_m.read(y, channels * x+c) * 255.0f) as u8;
            }
        }
    }
    make_image(buf, width, height)
}

fn load_png(filename: &[u8]) -> Image {
    let mut ptr;
    let mut pixel_data;
    let mut width;
    let mut height;

    nn_load_png(0, filename, &mut ptr, &mut width, &mut height);
    pixel_data.data = ptr as &[i8];
    make_image(pixel_data, width, height)
}

// Kernel size, Channel count
fn im2col(img: Image, ksize: i32, channels: i32, padding:i32, stride: i32) -> () {
    // TODO: Do I need this? Shouldn't I just use sparse matrices for the weights?
    // Well then I need <newlayer-depth> many matrix multiplications, like this only one would be necessary
}